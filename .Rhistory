library(jsonlite)
df <- head(iris)
js <- jsonlite::toJSON(df, pretty = TRUE)
test_data <- list()
test_data$df <- df
test_data$json <- js
usethis::use_data(test_data, overwrite = TRUE)
js
run()
run()
data
as.data.frame(data)
test_data$json
test_data$df
library(jsonlite)
df <- head(iris)
js <- jsonlite::toJSON(df, pretty = TRUE)
js
js <- jsonlite::toJSON(list(df), pretty = TRUE)
js
js <- jsonlite::toJSON(df)
js
tibble(df)
toJSON(list(data=iris))
df
as.list(df)
toJSON(as.list(data=iris))
toJSON(as.list(df))
js <- jsonlite::toJSON(list(data = as.list(df)))
js
js <- jsonlite::toJSON(list(data = as.list(df)), pretty = TRUE)
js
## code to prepare `test_data` dataset goes here
library(jsonlite)
df <- head(iris)
js <- jsonlite::toJSON(list(data = as.list(df)), pretty = TRUE)
test_data <- list()
test_data$df <- df
test_data$json <- js
usethis::use_data(test_data, overwrite = TRUE)
run()
data
as.data.frame(data)
devtools::load_all()
run()
devtools::load_all()
run()
ga <- MATSimAPI::MATSimAPI$ga
ga
ga <- head(ga$apollo_inputs$database)
ga
## code to prepare `test_data` dataset goes here
library(jsonlite)
df <- head(iris)
js <- jsonlite::toJSON(list(data = as.list(df)), pretty = TRUE)
test_data <- list()
test_data$dummy <- df
test_data$dummy_json <- js
ga <- MATSimAPI::MATSimAPI$ga
ga <- head(ga$apollo_inputs$database)
ga_json <- jsonlite::toJSON(list(data = as.list(ga)), pretty = TRUE)
test_data$ga <- ga
test_data$ga_json <- ga_json
usethis::use_data(test_data, overwrite = TRUE)
test_data$ga_json
devtools::load_all()
run(9)
run()
data
data
data
db <- data %>%
select(all_of(v)) %>%
as.matrix()
?all_of
usethis::use_package("dplyr")
dplyr::all_of
devtools::load_all()
devtools::load_all()
iris
iris %>% select(Species)
devtools::document()
devtools::load_all()
iris %>% select(Species)
test_data$ga_json
run()
library(jsonlite)
devtools::load_all()
df <- head(iris)
js <- jsonlite::toJSON(list(data = as.list(df)), pretty = TRUE)
test_data <- list()
test_data$dummy <- df
test_data$dummy_json <- js
MATSimAPI
names(MATSimAPI)
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::load_all()
MATSimAPI::mtomodels
mtomodels
load("~/github/SNN/MATSimAPI/data/mtomodels.rda")
rm(list = ls())
usethis::use_data_raw("mtomodels")
load("./data-raw/mtomodels.rda")
mtomodels <- MATSimAPI
usethis::use_data(mtomodels, overwrite = TRUE)
devtools::load_all()
## code to prepare `test_data` dataset goes here
library(jsonlite)
devtools::load_all()
df <- head(iris)
js <- jsonlite::toJSON(list(data = as.list(df)), pretty = TRUE)
test_data <- list()
test_data$dummy <- df
test_data$dummy_json <- js
ga <- MATSimAPI::mtomodels$ga
ga <- ga$apollo_inputs$database
ga_json <- jsonlite::toJSON(list(data = as.list(ga)), pretty = TRUE)
test_data$ga <- ga
test_data$ga_json <- ga_json
usethis::use_data(test_data, overwrite = TRUE)
devtools::load_all()
run()
test_data
test_data -> tmp
tmp$ga_json
tmp$ga_json
library(jsonlite)
tmp$ga_json
library(jsonlite)
devtools::load_all()
df <- head(iris)
js <- jsonlite::toJSON(list(data = as.list(df)), pretty = TRUE)
test_data <- list()
test_data$dummy <- df
test_data$dummy_json <- js
ga <- MATSimAPI::mtomodels$ga
ga
ga <- ga$apollo_inputs$database
ga
ga_json <- jsonlite::toJSON(list(data = as.list(ga)), pretty = TRUE)
ga_json
ga
devtools::load_all()
test_data$ga_json
run()
test_data_from_model <- function(model) {
out <- list()
df <- model$apollo_inputs$database
js <- jsonlite::toJSON(list(data = as.list(df)), pretty = TRUE)
out$df <- df
out$json <- js
return(out)
}
ga <- test_data_from_model(MATSimAPI::mtomodels$ga)
ga <- test_data_from_model(MATSimAPI::mtomodels$ga)
test_data$ga <- ga$df
test_data$ga_json <- ga$json
ga
td <-
purrr::map(MATSimAPI::mtomodels, function(x) {
test_data_from_model(x)
})
td
library(jsonlite)
devtools::load_all()
rm(list = ls())
test_data_from_model <- function(model) {
out <- list()
df <- model$apollo_inputs$database
js <- jsonlite::toJSON(list(data = as.list(df)), pretty = TRUE)
out$df <- df
out$json <- js
return(out)
}
df <- head(iris)
js <- jsonlite::toJSON(list(data = as.list(df)), pretty = TRUE)
test_data <- list()
test_data$dummy <- df
test_data$dummy_json <- js
td_mto <-
purrr::map(MATSimAPI::mtomodels, function(x) {
test_data_from_model(x)
})
td_mto
td_mto$ga$json
test_data <- append(test_data, td_mto)
test_data$ga
test_data$ga$json
test_data$ga$df
## code to prepare `test_data` dataset goes here
library(jsonlite)
devtools::load_all()
rm(list = ls())
test_data_from_model <- function(model) {
out <- list()
df <- model$apollo_inputs$database
js <- jsonlite::toJSON(list(data = as.list(df)), pretty = TRUE)
out$df <- df
out$json <- js
return(out)
}
df <- head(iris)
js <- jsonlite::toJSON(list(data = as.list(df)), pretty = TRUE)
test_data <- list()
test_data$dummy <- df
test_data$dummy_json <- js
td_mto <-
purrr::map(MATSimAPI::mtomodels, function(x) {
test_data_from_model(x)
})
test_data <- append(test_data, td_mto)
usethis::use_data(test_data, overwrite = TRUE)
devtools::load_all()
ga_predictor(data = test_data$ga$df, model = mtomodels$ga)
debugonce(ga_predictor)
ga_predictor(data = test_data$ga$df, model = mtomodels$ga)
est
mtomodels$ga$model
ga_predictor(data = test_data$ga$df, model = mtomodels$ga$model)
mtomodels
names(mtomodels)
data <- test_data$ca$df
model <- mtomodels$ca$model
est <- model$estimate
est
names(est)
ga_predictor(return_vars = TRUE)
ga_predictor(data, model, return_vars = TRUE)
names(est)
excl <- c("b_ca_fixed_cost", "b_ca_type_1", "b_ca_type_2", "b_ca_type_3", "b_ca_type_4", "c1", "c2", "scale")
#' @export
`%!in%` <- function(x, y) {
!(x %in% y)
}
a <- c("a", "b", "c")
b <- ("b", "c", "d")
b <- c("b", "c", "d")
a %!in% b
devtools::load_all()
ca_predictor <- function(data, model, fix = NULL, cc = NULL, return_vars = FALSE) {
est <- model$estimate
excl <- c("b_ca_fixed_cost", "b_ca_type_1", "b_ca_type_2", "b_ca_type_3", "b_ca_type_4", "c1", "c2", "scale")
if (is.null(cc)) {
c1 <- est["c1"]
} else {
c1 <- cc
}
est <- est[names(est) %!in% excl]
if (!is.null(fix)) {
est[names(fix)] <- fix
}
v <- vars_from_beta(est)
if (return_vars) {
return(v)
}
db <-
data %>%
select(all_of(v)) %>%
as.matrix()
y_star <- -c1 + db %*% est
p1 <- pnorm(y_star)
p0 <- 1 - p1
p <- data.frame(p0 = p0, p1 = p1)
return(p)
}
ca_predictor(data = data, model = model)
devtools::load_all()
ca_predictor(data = data, model = model)
ca_predictor <- function(data, model, fix = NULL, cc = NULL, return_vars = FALSE) {
est <- model$estimate
excl <- c("b_wfh_x_wfa", "b_ca_fixed_cost", "b_ca_type_1", "b_ca_type_2", "b_ca_type_3", "b_ca_type_4", "c1", "c2", "scale")
if (is.null(cc)) {
c1 <- est["c1"]
} else {
c1 <- cc
}
est <- est[names(est) %!in% excl]
if (!is.null(fix)) {
est[names(fix)] <- fix
}
v <- vars_from_beta(est)
if (return_vars) {
return(v)
}
db <-
data %>%
select(all_of(v)) %>%
as.matrix()
y_star <- -c1 + db %*% est
p1 <- pnorm(y_star)
p0 <- 1 - p1
p <- data.frame(p0 = p0, p1 = p1)
return(p)
}
ca_predictor(data = data, model = model)
ca_predictor(data = data, model = model, return_vars = TRUE)
devtools::load_all()
devtools::document()
devtools::load_all()
rm(list = ls())
devtools::load_all()
?MATSimAPI
help(package = "MATSimAPI")
?MATSimAPI::ga_predictor
names(mtomodles)
names(mtomodels)
data <- test_data$re$df
model <- mtomodels$re$model
est <- model$estimate
names(est)
excl <- c("b_wfh_x_wfa", "c1", "c2", "scale")
if (is.null(cc)) {
c1 <- est["c1"]
} else {
c1 <- cc
}
est <- est[names(est) %!in% excl]
if (!is.null(fix)) {
est[names(fix)] <- fix
}
v <- vars_from_beta(est)
v
db <-
data %>%
select(all_of(v)) %>%
as.matrix()
y_star <- -c1 + db %*% est
re_predictor <- function(data, model, fix = NULL, cc = NULL, return_vars = FALSE) {
est <- model$estimate
excl <- c("b_wfh_x_wfa", "c1", "c2", "scale")
if (is.null(cc)) {
c1 <- est["c1"]
} else {
c1 <- cc
}
est <- est[names(est) %!in% excl]
if (!is.null(fix)) {
est[names(fix)] <- fix
}
v <- vars_from_beta(est)
if (return_vars) {
return(v)
}
db <-
data %>%
select(all_of(v)) %>%
as.matrix()
y_star <- -c1 + db %*% est
p1 <- pnorm(y_star)
p0 <- 1 - p1
p <- data.frame(p0 = p0, p1 = p1)
return(p)
}
re_predictor(data, model)
devtools::load_all()
devtools::load_all()
ga_predictor(data = test_data$ga$df, model = mtomodels$ga$model)
names(mtomodels)
model <- mtomodels$ht$model
names(model$estimate)
names(mtomodels)
model <- mtomodesl$cs$model
devtools::load_all()
model <- mtomodesl$cs$model
model <- mtomodels$cs$model
names(model$estimate)
model <- mtomodels$bi$model
names(model$estimate)
names(mtomodels)
devtools::load_all()
run()
str()
str(NULL)
devtools::load_all()
run()
library(httr)
help(package = "httr")
r <- GET("http://127.0.0.1:8000/null")
response(r)
content(r)
usethis::use_package("apollo")
usethis::use_data_raw("wfhmodels")
library(jsonlite)
devtools::load_all()
rm(list = ls())
test_data_from_model <- function(model) {
out <- list()
df <- model$apollo_inputs$database
js <- jsonlite::toJSON(list(data = as.list(df)), pretty = TRUE)
out$df <- df
out$json <- js
return(out)
}
# Dummy
df <- head(iris)
js <- jsonlite::toJSON(list(data = as.list(df)), pretty = TRUE)
test_data <- list()
test_data$dummy <- df
test_data$dummy_json <- js
# MTO
td_mto <-
purrr::map(MATSimAPI::mtomodels, function(x) {
test_data_from_model(x)
})
test_data <- append(test_data, td_mto)
# WFH
td_wfh <- test_data_from_model(MATSimAPI::wfhmodels$heckman)
td_wfh
td_wfh$df
td_wfh$df -> test
td_wfh
# WFH
td_wfh <- list(wfh = test_data_from_model(MATSimAPI::wfhmodels$heckman))
td_wfh
## code to prepare `test_data` dataset goes here
library(jsonlite)
devtools::load_all()
rm(list = ls())
test_data_from_model <- function(model) {
out <- list()
df <- model$apollo_inputs$database
js <- jsonlite::toJSON(list(data = as.list(df)), pretty = TRUE)
out$df <- df
out$json <- js
return(out)
}
# Dummy
df <- head(iris)
js <- jsonlite::toJSON(list(data = as.list(df)), pretty = TRUE)
dummy <- list()
dummy$df <- df
dummy$json <- js
test_data <- list()
test_data$dummy <- dummy
# MTO
td_mto <-
purrr::map(MATSimAPI::mtomodels, function(x) {
test_data_from_model(x)
})
test_data <- append(test_data, td_mto)
# WFH
td_wfh <- list(wfh = test_data_from_model(MATSimAPI::wfhmodels$heckman))
test_data <- append(test_data, td_wfh)
usethis::use_data(test_data, overwrite = TRUE)
data <- test_data$wfh$df
apollo_list <- wfhmodels$heckman
devtools::load_all()
debugonce(wfh_predictor)
wfh_predictor(data, apollo_list, excl = NULL)
list2env(apollo_list)
?attach
debugonce(wfh_predictor)
devtools::load_all()
wfh_predictor(data, apollo_list, excl = NULL)
debugonce(wfh_predictor)
wfh_predictor(data, apollo_list, excl = NULL)
attach(apollo_list, name = "apollo_list")
apollo_beta
devtools::load_all()
devtools::load_all()
wfh_predictor(data, apollo_list, excl = NULL)
search()
detach("apollo_list")
search()
detach("apollo_list")
detach("apollo_list")
search()
devtools::load_all()
wfh_predictor(data, apollo_list, excl = NULL)
search()
wfh_predictor(data, apollo_list, excl = NULL)
wfh_predictor(data, apollo_list, excl = NULL)
apollo_list$apollo_inputs
apollo_list$apollo_inputs$database
devtools::load_all()
wfh_predictor(data = test_data$wfh$df, apollo_list = wfhmodels$heckman, excl = NULL)
devtools::load_all()
wfh_predictor(data = test_data$wfh$df, apollo_list = wfhmodels$heckman, excl = NULL)
devtools::load_all()
devtools::document()
wfh_predictor(data = test_data$wfh$df, apollo_list = wfhmodels$heckman, excl = NULL)
devtools::document()
devtools::load_all()
wfh_predictor(data = test_data$wfh$df, apollo_list = wfhmodels$heckman, excl = NULL)
devtools::load_all()
devtools::document()
devtools::load_all()
wfh_predictor(data = test_data$wfh$df, apollo_list = wfhmodels$heckman, excl = NULL)
library(apollo)
devtools::load_all()
rm(list = ls())
list2env(MATSimAPI::wfhmodels$heckman, envir = .GlobalEnv)
p <- apollo_prediction(model, apollo_probabilities, apollo_inputs)
p
apollo_inputs$database
debugonce(apollo_prediction)
p <- apollo_prediction(model, apollo_probabilities, apollo_inputs)
debugonce(apollo_probabilities)
p <- apollo_prediction(model, apollo_probabilities, apollo_inputs)
P[["selection"]] <- apollo_op(s_settings, functionality)
?apollo_op
functionality
s_settings
s_settings$utilities <- s_settings$V
P[["selection"]] <- apollo_op(s_settings, functionality)
s_settings$utility <- s_settings$V
P[["selection"]] <- apollo_op(s_settings, functionality)
s_settings
s_settings$utility
s_settings$utility %>% dim()
