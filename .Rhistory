content(r)
usethis::use_package("apollo")
usethis::use_data_raw("wfhmodels")
library(jsonlite)
devtools::load_all()
rm(list = ls())
test_data_from_model <- function(model) {
out <- list()
df <- model$apollo_inputs$database
js <- jsonlite::toJSON(list(data = as.list(df)), pretty = TRUE)
out$df <- df
out$json <- js
return(out)
}
# Dummy
df <- head(iris)
js <- jsonlite::toJSON(list(data = as.list(df)), pretty = TRUE)
test_data <- list()
test_data$dummy <- df
test_data$dummy_json <- js
# MTO
td_mto <-
purrr::map(MATSimAPI::mtomodels, function(x) {
test_data_from_model(x)
})
test_data <- append(test_data, td_mto)
# WFH
td_wfh <- test_data_from_model(MATSimAPI::wfhmodels$heckman)
td_wfh
td_wfh$df
td_wfh$df -> test
td_wfh
# WFH
td_wfh <- list(wfh = test_data_from_model(MATSimAPI::wfhmodels$heckman))
td_wfh
## code to prepare `test_data` dataset goes here
library(jsonlite)
devtools::load_all()
rm(list = ls())
test_data_from_model <- function(model) {
out <- list()
df <- model$apollo_inputs$database
js <- jsonlite::toJSON(list(data = as.list(df)), pretty = TRUE)
out$df <- df
out$json <- js
return(out)
}
# Dummy
df <- head(iris)
js <- jsonlite::toJSON(list(data = as.list(df)), pretty = TRUE)
dummy <- list()
dummy$df <- df
dummy$json <- js
test_data <- list()
test_data$dummy <- dummy
# MTO
td_mto <-
purrr::map(MATSimAPI::mtomodels, function(x) {
test_data_from_model(x)
})
test_data <- append(test_data, td_mto)
# WFH
td_wfh <- list(wfh = test_data_from_model(MATSimAPI::wfhmodels$heckman))
test_data <- append(test_data, td_wfh)
usethis::use_data(test_data, overwrite = TRUE)
data <- test_data$wfh$df
apollo_list <- wfhmodels$heckman
devtools::load_all()
debugonce(wfh_predictor)
wfh_predictor(data, apollo_list, excl = NULL)
list2env(apollo_list)
?attach
debugonce(wfh_predictor)
devtools::load_all()
wfh_predictor(data, apollo_list, excl = NULL)
debugonce(wfh_predictor)
wfh_predictor(data, apollo_list, excl = NULL)
attach(apollo_list, name = "apollo_list")
apollo_beta
devtools::load_all()
devtools::load_all()
wfh_predictor(data, apollo_list, excl = NULL)
search()
detach("apollo_list")
search()
detach("apollo_list")
detach("apollo_list")
search()
devtools::load_all()
wfh_predictor(data, apollo_list, excl = NULL)
search()
wfh_predictor(data, apollo_list, excl = NULL)
wfh_predictor(data, apollo_list, excl = NULL)
apollo_list$apollo_inputs
apollo_list$apollo_inputs$database
devtools::load_all()
wfh_predictor(data = test_data$wfh$df, apollo_list = wfhmodels$heckman, excl = NULL)
devtools::load_all()
wfh_predictor(data = test_data$wfh$df, apollo_list = wfhmodels$heckman, excl = NULL)
devtools::load_all()
devtools::document()
wfh_predictor(data = test_data$wfh$df, apollo_list = wfhmodels$heckman, excl = NULL)
devtools::document()
devtools::load_all()
wfh_predictor(data = test_data$wfh$df, apollo_list = wfhmodels$heckman, excl = NULL)
devtools::load_all()
devtools::document()
devtools::load_all()
wfh_predictor(data = test_data$wfh$df, apollo_list = wfhmodels$heckman, excl = NULL)
library(apollo)
devtools::load_all()
rm(list = ls())
list2env(MATSimAPI::wfhmodels$heckman, envir = .GlobalEnv)
p <- apollo_prediction(model, apollo_probabilities, apollo_inputs)
p
apollo_inputs$database
debugonce(apollo_prediction)
p <- apollo_prediction(model, apollo_probabilities, apollo_inputs)
debugonce(apollo_probabilities)
p <- apollo_prediction(model, apollo_probabilities, apollo_inputs)
P[["selection"]] <- apollo_op(s_settings, functionality)
?apollo_op
functionality
s_settings
s_settings$utilities <- s_settings$V
P[["selection"]] <- apollo_op(s_settings, functionality)
s_settings$utility <- s_settings$V
P[["selection"]] <- apollo_op(s_settings, functionality)
s_settings
s_settings$utility
s_settings$utility %>% dim()
library(apollo)
devtools::load_all()
rm(list = ls())
wfhmodels$heckman
list2env(wfhmodels$heckman)
list2env(wfhmodels$heckman, envir = .GlobalEnv)
apollo_inputs_ <- apollo_validateInputs()
database <- test_data$wfh$df
apollo_inputs_ <- apollo_validateInputs()
apollo_fixed <- apollo_inputs$apollo_fixed
apollo_inputs_ <- apollo_validateInputs()
apollo_control <- apollo_inputs$apollo_control
apollo_inputs_ <- apollo_validateInputs()
apollo_draws <- apollo_inputs$apollo_draws
apollo_inputs_ <- apollo_validateInputs()
apollo_randCoeff <- apollo_inputs$apollo_randCoeff
apollo_inputs_ <- apollo_validateInputs()
p <- apollo_prediction(model, apollo_probabilities, apollo_inputs_)
p
est <- apollo_inputs$apollo_beta_names
est
excl <- c(excl, "c", "tau1", "tau2", "tau3", "tau4", "tau5", "s_sigma", "f_sigma")
excl <- NULL
excl <- c(excl, "c", "tau1", "tau2", "tau3", "tau4", "tau5", "s_sigma", "f_sigma")
excl <- c("c", "tau1", "tau2", "tau3", "tau4", "tau5", "s_sigma", "f_sigma")
est <- apollo_inputs$apollo_beta_names
excl <- c("c", "tau1", "tau2", "tau3", "tau4", "tau5", "s_sigma", "f_sigma")
est <- est[names(est) %!in% excl]
v <- vars_from_beta(est)
v
vars_from_beta()
vars_from_beta
vars_from_beta <- function(x) {
nm <- names(x)
vars <- stringr::str_remove(nm, "^f_|^s_")
return(vars)
}
v <- vars_from_beta(est)
v
vars_from_beta
est
vars_from_beta <- function(x) {
vars <- stringr::str_remove(x, "^f_|^s_")
return(vars)
}
v <- vars_from_beta(est)
v
est
est <- apollo_inputs$apollo_beta_names
est
vars_from_beta <- function(x) {
vars <- stringr::str_remove(x, "^f_|^s_")
return(vars)
}
v <- vars_from_beta(est)
v
est <- apollo_inputs$apollo_beta_names
excl <- c("c", "tau1", "tau2", "tau3", "tau4", "tau5", "s_sigma", "f_sigma")
est <- apollo_inputs$apollo_beta
est
est <- apollo_inputs$apollo_beta
est
est <- apollo_inputs$apollo_beta_names
excl <- c("c", "tau1", "tau2", "tau3", "tau4", "tau5", "s_sigma", "f_sigma")
est <- est[est %!in% excl]
vars_from_beta <- function(x) {
vars <- stringr::str_remove(x, "^f_|^s_")
return(vars)
}
v <- vars_from_beta(est)
v
usethis::use_package("stringr")
apollo_fixed
# c, tau1, tau2, tau3, tau4, tau5
model$estimate
fix <- c(c = -99)
# c, tau1, tau2, tau3, tau4, tau5
model$estimate[names(cc)] <- cc
cc <- c(c = -99)
# c, tau1, tau2, tau3, tau4, tau5
model$estimate[names(cc)] <- cc
model$estimate
cc <- c(c = -99, f_sigma = -99)
# c, tau1, tau2, tau3, tau4, tau5
model$estimate[names(cc)] <- cc
cc
# c, tau1, tau2, tau3, tau4, tau5
model$estimate[names(cc)] <- cc
model$estimate
devtools::load_all()
devtools::load_all()
wfh_predictor(data = test_data$wfh$df, apollo_list = wfhmodels$heckman, return_vars = TRUE)
devtools::load_all()
wfh_predictor(data = test_data$wfh$df, apollo_list = wfhmodels$heckman, return_vars = TRUE)
wfh_predictor(data = test_data$wfh$df, apollo_list = wfhmodels$heckman)
debugonce(wfh_predictor)
wfh_predictor(data = test_data$wfh$df, apollo_list = wfhmodels$heckman)
?apollo_validateInputs
devtools::load_all()
wfh_predictor(data = test_data$wfh$df, apollo_list = wfhmodels$heckman)
devtools::load_all()
devtools::document()
devtools::load_all()
wfh_predictor(data = test_data$wfh$df, apollo_list = wfhmodels$heckman)
devtools::load_all()
devtools::document()
devtools::load_all()
wfh_predictor(data = test_data$wfh$df, apollo_list = wfhmodels$heckman)
devtools::load_all()
devtools::document()
devtools::load_all()
wfh_predictor(data = test_data$wfh$df, apollo_list = wfhmodels$heckman)
debugonce(wfh_predictor)
wfh_predictor(data = test_data$wfh$df, apollo_list = wfhmodels$heckman)
apollo_inputs_ <-
apollo::apollo_validateInputs( # needs to be explicitly passed (as it searches globalenv...)
apollo_beta = apollo_beta,
apollo_fixed = apollo_fixed,
database = database,
apollo_control = apollo_control,
apollo_draws = apollo_draws,
apollo_randCoeff = apollo_randCoeff,
silent = TRUE
)
p <- apollo::apollo_prediction(model, apollo_probabilities, apollo_inputs_)
p
s <<- p$selection
f <<- p$frequency
selection <- s
frequency <- f
s
devtools::load_all()
wfh_predictor(data = test_data$wfh$df, apollo_list = wfhmodels$heckman)
devtools::load_all()
wfh_predictor(data = test_data$wfh$df, apollo_list = wfhmodels$heckman)
?apollo_prediction
devtools::load_all()
wfh_predictor(data = test_data$wfh$df, apollo_list = wfhmodels$heckman)
debugonce(wfh_predictor)
wfh_predictor(data = test_data$wfh$df, apollo_list = wfhmodels$heckman)
wfh_predictor(data = test_data$wfh$df, apollo_list = wfhmodels$heckman)
chatty <- function() {
print("blablabla")
cat("blublublub\n")
}
chatty()
chatty <- function() {
print("blablabla")
cat("blublublub\n")
return(1)
}
chatty()
capture.output(chatty())
capture.output(res <- chatty())
res
devtools::load_all()
wfh_predictor(data = test_data$wfh$df, apollo_list = wfhmodels$heckman)
devtools::load_all()
wfh_predictor(data = test_data$wfh$df, apollo_list = wfhmodels$heckman)
devtools::load_all()
run()
devtools::load_all()
run()
devtools::load_all()
run()
run()
devtools::load_all()
run("tests")
devtools::load_all()
run("tests")
devtools::load_all()
run()
devtools::load_all()
run()
devtools::load_all()
run()
devtools::load_all()
wfhmodels$full_time_week_dist
wfhmodels$full_time_week_dist$wfh_n_now %>% unique()
if (wfh %!in% 1:5) stop("`wfh` not in 1:5")
wfh = 7
if (wfh %!in% 1:5) stop("`wfh` not in 1:5")
wfh = 2
usethis::use_package("weekday_dist")
usethis::use_data_raw("weekday_dist")
## code to prepare `weekday_dist` dataset goes here
load("./data-raw/wfhmodels.rda")
weekday_dist <- list(heckman = MATSimAPI$full_time_week_dist)
usethis::use_data(weekday_dist, overwrite = TRUE)
## code to prepare `wfhmodels` dataset goes here
# see Makefile, rule update_wfh_modles
load("./data-raw/wfhmodels.rda")
wfhmodels <- list(heckman = MATSimAPI$heckman)
usethis::use_data(wfhmodels, overwrite = TRUE)
devtools::load_all()
wfhmodels
names(wfhmodels)
usethis::use_data_raw("full_time_week_dist")
## code to prepare `full_time_week_dist` dataset goes here
load("./data-raw/wfhmodels.rda")
full_time_week_dist <- list(heckman = MATSimAPI$full_time_week_dist)
usethis::use_data(full_time_week_dist, overwrite = TRUE)
devtools::load_all()
MATSimAPI::full_time_week_dist
devtools::load_all()
weekday_dist(wfh = 2, emp = "full_time")
debugonce(weekday_dist)
devtools::load_all()
debugonce(weekday_dist)
weekday_dist(wfh = 2, emp = "full_time")
debugonce(weekday_dist)
weekday_dist(wfh = 2, emp = "full_time")
MATSimAPI::full_time_week_dist %>%
mutate(wfh_n_now = as.numeric(as.character(wfh_n_now)))
devtools::load_all()
devtools::document()
devtools::load_all()
weekday_dist(wfh = 2, emp = "full_time")
MATSimAPI::full_time_week_dist
## code to prepare `full_time_week_dist` dataset goes here
load("./data-raw/wfhmodels.rda")
full_time_week_dist <- MATSimAPI$full_time_week_dist
usethis::use_data(full_time_week_dist, overwrite = TRUE)
devtools::load_all()
weekday_dist(wfh = 2, emp = "full_time")
devtools::load_all()
weekday_dist(wfh = 2, emp = "full_time")
weekday_dist(wfh = 2, emp = "full_time", weekday = "bla")
weekday_dist(wfh = 2, emp = "full_time", weekday = "monday")
devtools::load_all()
weekday_dist(wfh = 2, emp = "full_time", weekday = "monday")
devtools::load_all()
weekday_dist(wfh = 2, emp = "full_time", weekday = "monday")
devtools::load_all()
weekday_dist(wfh = 2, emp = "full_time", weekday = "monday")
weekday_dist(wfh = 2, emp = "full_time")
devtools::load_all()
run()
devtools::load_all()
run()
devtools::load_all()
run()
usethis::use_data_raw("variables")
devtools::load_all()
test_data
names(test_data)
test_data[[names(test_data) %!in% "dummy"]]
names(test_data) %!in% "dummy"
test_data[names(test_data) %!in% "dummy"]
d <- test_data[names(test_data) %!in% "dummy"]
d
d$ga
d$ga$df
rm(d)
dat <- test_data[names(test_data) %!in% "dummy"]
library(tidyverse)
rm(list = ls())
dat <- test_data[names(test_data) %!in% "dummy"]
dat %>%
map(function(x) {
x$df
})
dat <-
dat %>%
map(function(x) {
x$df
})
dat$ga
dat <- test_data[names(test_data) %!in% "dummy"]
dat <-
dat %>%
map(function(x) {
x$df
})
dat
dat <- test_data[names(test_data) %!in% "dummy"]
dat <-
dat %>%
map(function(x) {
x$df %>%
pivot_longer(everything())
})
dat
x$df
dat <- test_data[names(test_data) %!in% "dummy"]
dat <-
dat %>%
map(function(x) {
x$df
})
dat
dat$ga
dat %>%
reduce(bind_rows)
df <-
dat %>%
reduce(bind_rows)
df
view(df)
ga_predictor(data = NULL, model = mtomodels$ga, return_vars = TRUE)
ga_predictor(data = df, model = mtomodels$ga, return_vars = TRUE)
ga_predictor(data = NULL, model = mtomodels$ga$model, return_vars = TRUE)
names(dat)
modes <- names(dat)[names(dat) != "wfh"]
modes <- names(dat)[names(dat) != "wfh"]
get_mto_vars <- function(mode, func) {
func(data = NULL, model = mtomodels[[mode]]$model, return_vars = TRUE)
}
funcs <- list(ga_predictor, ca_predictor, re_predictor, ht_predictor, cs_predictor, bi_predictor)
get_mto_vars <- function(mode, func) {
func(data = NULL, model = mtomodels[[mode]]$model, return_vars = TRUE)
}
get_mto_vars(modes[1], funcs[1])
funcs[1]
get_mto_vars(modes[1], funcs[[1]])
all_vars <-
map2(modes, funcs, function(x, y) {
get_mto_vars(x, y)
})
all_vars
all_vars %>%
reduce(c)
all_vars %>%
reduce(c) %>%
distinct()
all_vars %>%
reduce(c) %>%
unique()
all_vars
all_vars <-
all_vars %>%
reduce(c) %>%
unique()
all_vars
all_vars <- c("ID", all_vars) # ID is always required...
all_vars
df[, all_vars]
df <- df[, all_vars]
df
run()
all_vars
all_vars %>% grep("^wk_schedule")
grep("^wk_schedule", all_vars)
grep("^wk_schedule", all_vars) ->idx
all_vars[idx]
variables <- data.frame(variable = all_vars, description = NA, type = NA, unit = NA)
variables
variables <-
data.frame(variable = all_vars, description = NA, type = NA, unit = NA) %>%
arrange(variable)
variable
variables
file.exists("./data-raw/variables.xlsx")
if (!file.exists("./data-raw/variables.xlsx")) { # init
xlsx::write.xlsx(variables, "./data-raw/variables.xlsx", row.names = FALSE)
}
# Manual labour
path <- "./data-raw/variables.xlsx"
if (!file.exists(path)) { # init
xlsx::write.xlsx(variables, path, row.names = FALSE)
}
# Save
variables <- readxl::read_xlsx(path)
variables
library(snndata)
labels$intro$is_leader
labels$intro$wk_leader
library(qualtricks)
qualtricks::get_label(snndata::survey_intro)
qualtricks::get_labels(snndata::survey_intro)
qualtricks::get_label(snndata::survey_intro$main)
qualtricks::get_label(snndata::survey_intro$main)$wk_leader
qualtricks::get_label(snndata::survey_intro$main)["wk_leader"]
qualtricks::get_label(snndata::survey_intro$main)["isc"]
qualtricks::get_label(snndata::survey_intro$main) -> labs
labs
labs[grep("^wk_isco", labs)]
labs[grep("^wk_isco", names(labs))]
labs[grep("^wk_isco", names(labs))] %>% view()
labs
view(labs)
