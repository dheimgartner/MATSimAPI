usethis::use_pipe()
devtools::document()
usethis::use_package("plumber")
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
help(package = "MATSimAPI")
?run
?MATSimAPI::run
devtools::load_all()
?MATSimAPI::run
MATSimAPI::run()
?plumber::plumb_api
plumber::available_apis()
plumber::available_apis(package = "MATSimAPI")
api_path <- system.file("plumber", "api.R", package = "MATSimAPI")
?system.file
api_path <- system.file("plumber", "predictors", "api.R", package = "MATSimAPI")
plumber::available_apis(package = "MATSimAPI")
devtools::load_all()
plumber::available_apis(package = "MATSimAPI")
?plumber::available_apis
devtools::load_all()
devtools::document()
api()
devtools::load_all()
api()
help(package = "plumber")
browseVignettes(package = "plumber")
?plumber::plumb_api
?devtools::install_local
devtools::install_local()
devtools::load_all()
devtools::document()
devtools::document()
devtools::load_all()
api_path <- system.file("plumber", "predictors", "api.R", package = "MATSimAPI")
rm(api_path)
devtools::install_local()
library(MATSimAPI)
help(package = "MATSimAPI")
?run
remove.packages("MATSimAPI")
devtools::load_all()
devtools::document()
?run
devtools::load_all()
devtools::document()
?echo
plumber_api()
library(plumber)
plumber_api()
plumber::plumb_api()
plumber::plumb_api(name = "01-append")
plumber::plumb_api(edit = TRUE)
plumber::plumb_api(package = "plumber", name = "01-append", edit = TRUE)
devtools::load_all()
plumb_api()
?plumb_api
available_apis(package = "plumber")
available_apis(package = "MATSimAPI")
debugonce(available_apis)
available_apis(package = "MATSimAPI")
package
system.file("plumber", package = "MATSimAPI")
devtools::load_all()
system.file("plumber", package = "MATSimAPI")
devtools::install_local()
library(MATSimAPI)
help(package = "MATSimAPi")
help(package = "MATSimAPI")
run()
available_apis()
debugonce(available_apis)
available_apis(package = "MATSimAPI")
apis_dir <- system.file("plumber", package = package)
devtools::load_all()
system.file("plumber", package = "MATSimAPI")
remove.packages("MATSimAPI")
devtools::load_all()
system.file("plumber", package = "MATSimAPI")
devtools::load_all()
devtools::build()
install.packages("../MATSimAPI_0.0.0.9000.tar.gz")
library(MATSimAPI)
plumb_api()
library(MATSimAPI)
library(plumber)
available_apis()
plumber::plumb_api("MATSimAPI", name = "predictors")
remove.packages("MATSimAPI")
devtools::build(path = ".")
devtools::load_all()
run()
devtools::load_all()
MATSimAPI::MATSimAPI
MATSimAPI::MATSimAPI %>% names()
?pr_filter
devtools::load_all()
run(9)
run()
devtools::load_all()
run()
devtools::load_all()
run()
run()
devtools::load_all()
run()
devtools::load_all()
run()
devtools::load_all()
run()
devtools::load_all()
run()
devtools::load_all()
run()
xs fkk,y
devtools::load_all()
run()
devtools::load_all()
run()
devtools::load_all()
run()
devtools::load_all()
run()
devtools::load_all()
run(9)
run()
devtools::load_all()
run()
MATSimAPI::MATSimAPI$ga
devtools::load_all()
run()
devtools::load_all()
run()
devtools::load_all()
ga_predictor(NULL, MATSimAPI$ga, return_vars = TRUE)
devtools::load_all()
ga_predictor(NULL, MATSimAPI$ga, return_vars = TRUE)
devtools::load_all()
ga_predictor(NULL, MATSimAPI$ga, return_vars = TRUE)
debugonce(ga_predictor)
ga_predictor(NULL, MATSimAPI$ga, return_vars = TRUE)
debugonce(ga_predictor)
MATSimAPI::MATSimAPI$ga
MATSimAPI::MATSimAPI$ga$model
ga_predictor(NULL, MATSimAPI$ga, return_vars = TRUE)
model
devtools::load_all()
devtools::load_all()
run()
out <- ga_predictor(
data = NULL,
model = MATSimAPI::MATSimAPI$ga,
fix = NULL,
cc = NULL,
return_vars = TRUE
)
out
debugonce(ga_predictor)
out <- ga_predictor(
data = NULL,
model = MATSimAPI::MATSimAPI$ga,
fix = NULL,
cc = NULL,
return_vars = TRUE
)
model
model$estimate
devtools::load_all()
out <- ga_predictor(
data = NULL,
model = MATSimAPI::MATSimAPI$ga$model,
fix = NULL,
cc = NULL,
return_vars = TRUE
)
out
run()
devtools::load_all()
MATSimAPI::MATSimAPI$ga$apollo_inputs$database
MATSimAPI::MATSimAPI$ga$apollo_inputs$database -> df
df
out <- ga_predictor(
data = NULL,
model = MATSimAPI::MATSimAPI$ga$model,
fix = NULL,
cc = NULL,
return_vars = TRUE
)
out
out
df %>% select(all_of(out)) -> df
library(tidyverse)
df %>% select(all_of(out)) -> df
df
head(df)
head(df) -> df
df
jsonlite::toJSON(df)
run()
df
df %>% slice(1)
devtools::load_all()
run()
devtools::load_all()
run()
data
usethis::use_data_raw("test_data")
test_data <- head(iris)
iris3
df <- head(iris)
df <- head(iris)
js <- jsonlite::toJSON(df)
js
?toJSON
run()
unbox(js)
library(jsonlite)
df <- head(iris)
js <- jsonlite::toJSON(df)
unbox(js)
js <- jsonlite::toJSON(df, pretty = TRUE)
js
## code to prepare `test_data` dataset goes here
library(jsonlite)
df <- head(iris)
js <- jsonlite::toJSON(df, pretty = TRUE)
test_data <- list()
test_data$df <- df
test_dtat$json <- js
## code to prepare `test_data` dataset goes here
library(jsonlite)
df <- head(iris)
js <- jsonlite::toJSON(df, pretty = TRUE)
test_data <- list()
test_data$df <- df
test_data$json <- js
usethis::use_data(test_data, overwrite = TRUE)
js
run()
run()
data
as.data.frame(data)
test_data$json
test_data$df
library(jsonlite)
df <- head(iris)
js <- jsonlite::toJSON(df, pretty = TRUE)
js
js <- jsonlite::toJSON(list(df), pretty = TRUE)
js
js <- jsonlite::toJSON(df)
js
tibble(df)
toJSON(list(data=iris))
df
as.list(df)
toJSON(as.list(data=iris))
toJSON(as.list(df))
js <- jsonlite::toJSON(list(data = as.list(df)))
js
js <- jsonlite::toJSON(list(data = as.list(df)), pretty = TRUE)
js
## code to prepare `test_data` dataset goes here
library(jsonlite)
df <- head(iris)
js <- jsonlite::toJSON(list(data = as.list(df)), pretty = TRUE)
test_data <- list()
test_data$df <- df
test_data$json <- js
usethis::use_data(test_data, overwrite = TRUE)
run()
data
as.data.frame(data)
devtools::load_all()
run()
devtools::load_all()
run()
ga <- MATSimAPI::MATSimAPI$ga
ga
ga <- head(ga$apollo_inputs$database)
ga
## code to prepare `test_data` dataset goes here
library(jsonlite)
df <- head(iris)
js <- jsonlite::toJSON(list(data = as.list(df)), pretty = TRUE)
test_data <- list()
test_data$dummy <- df
test_data$dummy_json <- js
ga <- MATSimAPI::MATSimAPI$ga
ga <- head(ga$apollo_inputs$database)
ga_json <- jsonlite::toJSON(list(data = as.list(ga)), pretty = TRUE)
test_data$ga <- ga
test_data$ga_json <- ga_json
usethis::use_data(test_data, overwrite = TRUE)
test_data$ga_json
devtools::load_all()
run(9)
run()
data
data
data
db <- data %>%
select(all_of(v)) %>%
as.matrix()
?all_of
usethis::use_package("dplyr")
dplyr::all_of
devtools::load_all()
devtools::load_all()
iris
iris %>% select(Species)
devtools::document()
devtools::load_all()
iris %>% select(Species)
test_data$ga_json
run()
library(jsonlite)
devtools::load_all()
df <- head(iris)
js <- jsonlite::toJSON(list(data = as.list(df)), pretty = TRUE)
test_data <- list()
test_data$dummy <- df
test_data$dummy_json <- js
MATSimAPI
names(MATSimAPI)
